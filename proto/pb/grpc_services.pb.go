// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: grpc_services.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserPrefs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodWithKids int32 `protobuf:"varint,1,opt,name=GoodWithKids,proto3" json:"GoodWithKids,omitempty"`
	GoodWithDogs int32 `protobuf:"varint,2,opt,name=GoodWithDogs,proto3" json:"GoodWithDogs,omitempty"`
	Shedding     int32 `protobuf:"varint,3,opt,name=Shedding,proto3" json:"Shedding,omitempty"`
	Grooming     int32 `protobuf:"varint,4,opt,name=Grooming,proto3" json:"Grooming,omitempty"`
	Energy       int32 `protobuf:"varint,5,opt,name=Energy,proto3" json:"Energy,omitempty"`
}

func (x *UserPrefs) Reset() {
	*x = UserPrefs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPrefs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPrefs) ProtoMessage() {}

func (x *UserPrefs) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPrefs.ProtoReflect.Descriptor instead.
func (*UserPrefs) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{0}
}

func (x *UserPrefs) GetGoodWithKids() int32 {
	if x != nil {
		return x.GoodWithKids
	}
	return 0
}

func (x *UserPrefs) GetGoodWithDogs() int32 {
	if x != nil {
		return x.GoodWithDogs
	}
	return 0
}

func (x *UserPrefs) GetShedding() int32 {
	if x != nil {
		return x.Shedding
	}
	return 0
}

func (x *UserPrefs) GetGrooming() int32 {
	if x != nil {
		return x.Grooming
	}
	return 0
}

func (x *UserPrefs) GetEnergy() int32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string     `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Password  string     `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	Email     string     `protobuf:"bytes,3,opt,name=Email,proto3" json:"Email,omitempty"`
	UserPrefs *UserPrefs `protobuf:"bytes,4,opt,name=UserPrefs,proto3" json:"UserPrefs,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetUserPrefs() *UserPrefs {
	if x != nil {
		return x.UserPrefs
	}
	return nil
}

type UserID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID int32 `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *UserID) Reset() {
	*x = UserID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserID) ProtoMessage() {}

func (x *UserID) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserID.ProtoReflect.Descriptor instead.
func (*UserID) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{2}
}

func (x *UserID) GetUserID() int32 {
	if x != nil {
		return x.UserID
	}
	return 0
}

type GetEmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetEmptyRequest) Reset() {
	*x = GetEmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmptyRequest) ProtoMessage() {}

func (x *GetEmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmptyRequest.ProtoReflect.Descriptor instead.
func (*GetEmptyRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{3}
}

type GetAllUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsersList []*UserWithoutPassword `protobuf:"bytes,1,rep,name=users_list,json=usersList,proto3" json:"users_list,omitempty"`
}

func (x *GetAllUsersResponse) Reset() {
	*x = GetAllUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUsersResponse) ProtoMessage() {}

func (x *GetAllUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUsersResponse.ProtoReflect.Descriptor instead.
func (*GetAllUsersResponse) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllUsersResponse) GetUsersList() []*UserWithoutPassword {
	if x != nil {
		return x.UsersList
	}
	return nil
}

type UserWithoutPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int32      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Email     string     `protobuf:"bytes,3,opt,name=Email,proto3" json:"Email,omitempty"`
	UserPrefs *UserPrefs `protobuf:"bytes,4,opt,name=UserPrefs,proto3" json:"UserPrefs,omitempty"`
}

func (x *UserWithoutPassword) Reset() {
	*x = UserWithoutPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserWithoutPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserWithoutPassword) ProtoMessage() {}

func (x *UserWithoutPassword) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserWithoutPassword.ProtoReflect.Descriptor instead.
func (*UserWithoutPassword) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{5}
}

func (x *UserWithoutPassword) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UserWithoutPassword) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserWithoutPassword) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserWithoutPassword) GetUserPrefs() *UserPrefs {
	if x != nil {
		return x.UserPrefs
	}
	return nil
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=Email,proto3" json:"Email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{6}
}

func (x *LoginRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{7}
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CreateDogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KennelID int32  `protobuf:"varint,1,opt,name=KennelID,proto3" json:"KennelID,omitempty"`
	BreedID  int32  `protobuf:"varint,2,opt,name=BreedID,proto3" json:"BreedID,omitempty"`
	DogName  string `protobuf:"bytes,3,opt,name=DogName,proto3" json:"DogName,omitempty"`
	Sex      string `protobuf:"bytes,4,opt,name=Sex,proto3" json:"Sex,omitempty"`
}

func (x *CreateDogRequest) Reset() {
	*x = CreateDogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDogRequest) ProtoMessage() {}

func (x *CreateDogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDogRequest.ProtoReflect.Descriptor instead.
func (*CreateDogRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{8}
}

func (x *CreateDogRequest) GetKennelID() int32 {
	if x != nil {
		return x.KennelID
	}
	return 0
}

func (x *CreateDogRequest) GetBreedID() int32 {
	if x != nil {
		return x.BreedID
	}
	return 0
}

func (x *CreateDogRequest) GetDogName() string {
	if x != nil {
		return x.DogName
	}
	return ""
}

func (x *CreateDogRequest) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

type UpdateDogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KennelID int32  `protobuf:"varint,1,opt,name=KennelID,proto3" json:"KennelID,omitempty"`
	BreedID  int32  `protobuf:"varint,2,opt,name=BreedID,proto3" json:"BreedID,omitempty"`
	DogID    int32  `protobuf:"varint,3,opt,name=DogID,proto3" json:"DogID,omitempty"`
	DogName  string `protobuf:"bytes,4,opt,name=DogName,proto3" json:"DogName,omitempty"`
	Sex      string `protobuf:"bytes,5,opt,name=Sex,proto3" json:"Sex,omitempty"`
}

func (x *UpdateDogRequest) Reset() {
	*x = UpdateDogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDogRequest) ProtoMessage() {}

func (x *UpdateDogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDogRequest.ProtoReflect.Descriptor instead.
func (*UpdateDogRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateDogRequest) GetKennelID() int32 {
	if x != nil {
		return x.KennelID
	}
	return 0
}

func (x *UpdateDogRequest) GetBreedID() int32 {
	if x != nil {
		return x.BreedID
	}
	return 0
}

func (x *UpdateDogRequest) GetDogID() int32 {
	if x != nil {
		return x.DogID
	}
	return 0
}

func (x *UpdateDogRequest) GetDogName() string {
	if x != nil {
		return x.DogName
	}
	return ""
}

func (x *UpdateDogRequest) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

type Dog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KennelID int32     `protobuf:"varint,1,opt,name=KennelID,proto3" json:"KennelID,omitempty"`
	DogID    int32     `protobuf:"varint,2,opt,name=DogID,proto3" json:"DogID,omitempty"`
	DogName  string    `protobuf:"bytes,3,opt,name=DogName,proto3" json:"DogName,omitempty"`
	Sex      string    `protobuf:"bytes,4,opt,name=Sex,proto3" json:"Sex,omitempty"`
	Breed    *DogBreed `protobuf:"bytes,5,opt,name=Breed,proto3" json:"Breed,omitempty"`
}

func (x *Dog) Reset() {
	*x = Dog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dog) ProtoMessage() {}

func (x *Dog) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dog.ProtoReflect.Descriptor instead.
func (*Dog) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{10}
}

func (x *Dog) GetKennelID() int32 {
	if x != nil {
		return x.KennelID
	}
	return 0
}

func (x *Dog) GetDogID() int32 {
	if x != nil {
		return x.DogID
	}
	return 0
}

func (x *Dog) GetDogName() string {
	if x != nil {
		return x.DogName
	}
	return ""
}

func (x *Dog) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *Dog) GetBreed() *DogBreed {
	if x != nil {
		return x.Breed
	}
	return nil
}

type DogBreed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BreedID      int32  `protobuf:"varint,1,opt,name=BreedID,proto3" json:"BreedID,omitempty"`
	GoodWithKids int32  `protobuf:"varint,2,opt,name=GoodWithKids,proto3" json:"GoodWithKids,omitempty"`
	GoodWithDogs int32  `protobuf:"varint,3,opt,name=GoodWithDogs,proto3" json:"GoodWithDogs,omitempty"`
	Shedding     int32  `protobuf:"varint,4,opt,name=Shedding,proto3" json:"Shedding,omitempty"`
	Grooming     int32  `protobuf:"varint,5,opt,name=Grooming,proto3" json:"Grooming,omitempty"`
	Energy       int32  `protobuf:"varint,6,opt,name=Energy,proto3" json:"Energy,omitempty"`
	BreedName    string `protobuf:"bytes,7,opt,name=BreedName,proto3" json:"BreedName,omitempty"`
	BreedImg     string `protobuf:"bytes,8,opt,name=BreedImg,proto3" json:"BreedImg,omitempty"`
}

func (x *DogBreed) Reset() {
	*x = DogBreed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DogBreed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DogBreed) ProtoMessage() {}

func (x *DogBreed) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DogBreed.ProtoReflect.Descriptor instead.
func (*DogBreed) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{11}
}

func (x *DogBreed) GetBreedID() int32 {
	if x != nil {
		return x.BreedID
	}
	return 0
}

func (x *DogBreed) GetGoodWithKids() int32 {
	if x != nil {
		return x.GoodWithKids
	}
	return 0
}

func (x *DogBreed) GetGoodWithDogs() int32 {
	if x != nil {
		return x.GoodWithDogs
	}
	return 0
}

func (x *DogBreed) GetShedding() int32 {
	if x != nil {
		return x.Shedding
	}
	return 0
}

func (x *DogBreed) GetGrooming() int32 {
	if x != nil {
		return x.Grooming
	}
	return 0
}

func (x *DogBreed) GetEnergy() int32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *DogBreed) GetBreedName() string {
	if x != nil {
		return x.BreedName
	}
	return ""
}

func (x *DogBreed) GetBreedImg() string {
	if x != nil {
		return x.BreedImg
	}
	return ""
}

type GetAllDogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DogList []*Dog `protobuf:"bytes,1,rep,name=dog_list,json=dogList,proto3" json:"dog_list,omitempty"`
}

func (x *GetAllDogsResponse) Reset() {
	*x = GetAllDogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllDogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllDogsResponse) ProtoMessage() {}

func (x *GetAllDogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllDogsResponse.ProtoReflect.Descriptor instead.
func (*GetAllDogsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{12}
}

func (x *GetAllDogsResponse) GetDogList() []*Dog {
	if x != nil {
		return x.DogList
	}
	return nil
}

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{13}
}

type DogID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DogID string `protobuf:"bytes,1,opt,name=DogID,proto3" json:"DogID,omitempty"`
}

func (x *DogID) Reset() {
	*x = DogID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DogID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DogID) ProtoMessage() {}

func (x *DogID) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DogID.ProtoReflect.Descriptor instead.
func (*DogID) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{14}
}

func (x *DogID) GetDogID() string {
	if x != nil {
		return x.DogID
	}
	return ""
}

type Kennel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KennelID      int32    `protobuf:"varint,1,opt,name=KennelID,proto3" json:"KennelID,omitempty"`
	ContactNumber string   `protobuf:"bytes,2,opt,name=ContactNumber,proto3" json:"ContactNumber,omitempty"`
	Name          string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Address       *Address `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Kennel) Reset() {
	*x = Kennel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kennel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kennel) ProtoMessage() {}

func (x *Kennel) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kennel.ProtoReflect.Descriptor instead.
func (*Kennel) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{15}
}

func (x *Kennel) GetKennelID() int32 {
	if x != nil {
		return x.KennelID
	}
	return 0
}

func (x *Kennel) GetContactNumber() string {
	if x != nil {
		return x.ContactNumber
	}
	return ""
}

func (x *Kennel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Kennel) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type KennelID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KennelID int32 `protobuf:"varint,1,opt,name=KennelID,proto3" json:"KennelID,omitempty"`
}

func (x *KennelID) Reset() {
	*x = KennelID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KennelID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KennelID) ProtoMessage() {}

func (x *KennelID) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KennelID.ProtoReflect.Descriptor instead.
func (*KennelID) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{16}
}

func (x *KennelID) GetKennelID() int32 {
	if x != nil {
		return x.KennelID
	}
	return 0
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numero string `protobuf:"bytes,1,opt,name=Numero,proto3" json:"Numero,omitempty"`
	Rua    string `protobuf:"bytes,2,opt,name=Rua,proto3" json:"Rua,omitempty"`
	Bairro string `protobuf:"bytes,3,opt,name=Bairro,proto3" json:"Bairro,omitempty"`
	CEP    string `protobuf:"bytes,4,opt,name=CEP,proto3" json:"CEP,omitempty"`
	Cidade string `protobuf:"bytes,5,opt,name=Cidade,proto3" json:"Cidade,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{17}
}

func (x *Address) GetNumero() string {
	if x != nil {
		return x.Numero
	}
	return ""
}

func (x *Address) GetRua() string {
	if x != nil {
		return x.Rua
	}
	return ""
}

func (x *Address) GetBairro() string {
	if x != nil {
		return x.Bairro
	}
	return ""
}

func (x *Address) GetCEP() string {
	if x != nil {
		return x.CEP
	}
	return ""
}

func (x *Address) GetCidade() string {
	if x != nil {
		return x.Cidade
	}
	return ""
}

type DogsInTheKennel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DogName   string `protobuf:"bytes,1,opt,name=DogName,proto3" json:"DogName,omitempty"`
	DogSex    string `protobuf:"bytes,2,opt,name=DogSex,proto3" json:"DogSex,omitempty"`
	BreedName string `protobuf:"bytes,3,opt,name=BreedName,proto3" json:"BreedName,omitempty"`
	BreedID   int32  `protobuf:"varint,4,opt,name=BreedID,proto3" json:"BreedID,omitempty"`
}

func (x *DogsInTheKennel) Reset() {
	*x = DogsInTheKennel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DogsInTheKennel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DogsInTheKennel) ProtoMessage() {}

func (x *DogsInTheKennel) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DogsInTheKennel.ProtoReflect.Descriptor instead.
func (*DogsInTheKennel) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{18}
}

func (x *DogsInTheKennel) GetDogName() string {
	if x != nil {
		return x.DogName
	}
	return ""
}

func (x *DogsInTheKennel) GetDogSex() string {
	if x != nil {
		return x.DogSex
	}
	return ""
}

func (x *DogsInTheKennel) GetBreedName() string {
	if x != nil {
		return x.BreedName
	}
	return ""
}

func (x *DogsInTheKennel) GetBreedID() int32 {
	if x != nil {
		return x.BreedID
	}
	return 0
}

type GetKennelByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kennel *Kennel            `protobuf:"bytes,1,opt,name=kennel,proto3" json:"kennel,omitempty"`
	Dogs   []*DogsInTheKennel `protobuf:"bytes,2,rep,name=dogs,proto3" json:"dogs,omitempty"`
}

func (x *GetKennelByIdResponse) Reset() {
	*x = GetKennelByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKennelByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKennelByIdResponse) ProtoMessage() {}

func (x *GetKennelByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKennelByIdResponse.ProtoReflect.Descriptor instead.
func (*GetKennelByIdResponse) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{19}
}

func (x *GetKennelByIdResponse) GetKennel() *Kennel {
	if x != nil {
		return x.Kennel
	}
	return nil
}

func (x *GetKennelByIdResponse) GetDogs() []*DogsInTheKennel {
	if x != nil {
		return x.Dogs
	}
	return nil
}

type GetAllKennelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KennelList []*Kennel `protobuf:"bytes,1,rep,name=kennel_list,json=kennelList,proto3" json:"kennel_list,omitempty"`
}

func (x *GetAllKennelsResponse) Reset() {
	*x = GetAllKennelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllKennelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllKennelsResponse) ProtoMessage() {}

func (x *GetAllKennelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllKennelsResponse.ProtoReflect.Descriptor instead.
func (*GetAllKennelsResponse) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{20}
}

func (x *GetAllKennelsResponse) GetKennelList() []*Kennel {
	if x != nil {
		return x.KennelList
	}
	return nil
}

type CreateKennelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContactNumber string   `protobuf:"bytes,1,opt,name=ContactNumber,proto3" json:"ContactNumber,omitempty"`
	Name          string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Address       *Address `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CreateKennelRequest) Reset() {
	*x = CreateKennelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKennelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKennelRequest) ProtoMessage() {}

func (x *CreateKennelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKennelRequest.ProtoReflect.Descriptor instead.
func (*CreateKennelRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{21}
}

func (x *CreateKennelRequest) GetContactNumber() string {
	if x != nil {
		return x.ContactNumber
	}
	return ""
}

func (x *CreateKennelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateKennelRequest) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type CreateBreedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodWithKids int32  `protobuf:"varint,1,opt,name=GoodWithKids,proto3" json:"GoodWithKids,omitempty"`
	GoodWithDogs int32  `protobuf:"varint,2,opt,name=GoodWithDogs,proto3" json:"GoodWithDogs,omitempty"`
	Shedding     int32  `protobuf:"varint,3,opt,name=Shedding,proto3" json:"Shedding,omitempty"`
	Grooming     int32  `protobuf:"varint,4,opt,name=Grooming,proto3" json:"Grooming,omitempty"`
	Energy       int32  `protobuf:"varint,5,opt,name=Energy,proto3" json:"Energy,omitempty"`
	BreedName    string `protobuf:"bytes,6,opt,name=BreedName,proto3" json:"BreedName,omitempty"`
	BreedImg     string `protobuf:"bytes,7,opt,name=BreedImg,proto3" json:"BreedImg,omitempty"`
}

func (x *CreateBreedRequest) Reset() {
	*x = CreateBreedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBreedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBreedRequest) ProtoMessage() {}

func (x *CreateBreedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBreedRequest.ProtoReflect.Descriptor instead.
func (*CreateBreedRequest) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{22}
}

func (x *CreateBreedRequest) GetGoodWithKids() int32 {
	if x != nil {
		return x.GoodWithKids
	}
	return 0
}

func (x *CreateBreedRequest) GetGoodWithDogs() int32 {
	if x != nil {
		return x.GoodWithDogs
	}
	return 0
}

func (x *CreateBreedRequest) GetShedding() int32 {
	if x != nil {
		return x.Shedding
	}
	return 0
}

func (x *CreateBreedRequest) GetGrooming() int32 {
	if x != nil {
		return x.Grooming
	}
	return 0
}

func (x *CreateBreedRequest) GetEnergy() int32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *CreateBreedRequest) GetBreedName() string {
	if x != nil {
		return x.BreedName
	}
	return ""
}

func (x *CreateBreedRequest) GetBreedImg() string {
	if x != nil {
		return x.BreedImg
	}
	return ""
}

type Breed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BreedID      int32  `protobuf:"varint,1,opt,name=BreedID,proto3" json:"BreedID,omitempty"`
	GoodWithKids int32  `protobuf:"varint,2,opt,name=GoodWithKids,proto3" json:"GoodWithKids,omitempty"`
	GoodWithDogs int32  `protobuf:"varint,3,opt,name=GoodWithDogs,proto3" json:"GoodWithDogs,omitempty"`
	Shedding     int32  `protobuf:"varint,4,opt,name=Shedding,proto3" json:"Shedding,omitempty"`
	Grooming     int32  `protobuf:"varint,5,opt,name=Grooming,proto3" json:"Grooming,omitempty"`
	Energy       int32  `protobuf:"varint,6,opt,name=Energy,proto3" json:"Energy,omitempty"`
	BreedName    string `protobuf:"bytes,7,opt,name=BreedName,proto3" json:"BreedName,omitempty"`
	BreedImg     string `protobuf:"bytes,8,opt,name=BreedImg,proto3" json:"BreedImg,omitempty"`
}

func (x *Breed) Reset() {
	*x = Breed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Breed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Breed) ProtoMessage() {}

func (x *Breed) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Breed.ProtoReflect.Descriptor instead.
func (*Breed) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{23}
}

func (x *Breed) GetBreedID() int32 {
	if x != nil {
		return x.BreedID
	}
	return 0
}

func (x *Breed) GetGoodWithKids() int32 {
	if x != nil {
		return x.GoodWithKids
	}
	return 0
}

func (x *Breed) GetGoodWithDogs() int32 {
	if x != nil {
		return x.GoodWithDogs
	}
	return 0
}

func (x *Breed) GetShedding() int32 {
	if x != nil {
		return x.Shedding
	}
	return 0
}

func (x *Breed) GetGrooming() int32 {
	if x != nil {
		return x.Grooming
	}
	return 0
}

func (x *Breed) GetEnergy() int32 {
	if x != nil {
		return x.Energy
	}
	return 0
}

func (x *Breed) GetBreedName() string {
	if x != nil {
		return x.BreedName
	}
	return ""
}

func (x *Breed) GetBreedImg() string {
	if x != nil {
		return x.BreedImg
	}
	return ""
}

type GetAllBreedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BreedList []*Breed `protobuf:"bytes,1,rep,name=breed_list,json=breedList,proto3" json:"breed_list,omitempty"`
}

func (x *GetAllBreedResponse) Reset() {
	*x = GetAllBreedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllBreedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBreedResponse) ProtoMessage() {}

func (x *GetAllBreedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllBreedResponse.ProtoReflect.Descriptor instead.
func (*GetAllBreedResponse) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{24}
}

func (x *GetAllBreedResponse) GetBreedList() []*Breed {
	if x != nil {
		return x.BreedList
	}
	return nil
}

type BreedID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BreedID int32 `protobuf:"varint,1,opt,name=BreedID,proto3" json:"BreedID,omitempty"`
}

func (x *BreedID) Reset() {
	*x = BreedID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_services_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreedID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreedID) ProtoMessage() {}

func (x *BreedID) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_services_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreedID.ProtoReflect.Descriptor instead.
func (*BreedID) Descriptor() ([]byte, []int) {
	return file_grpc_services_proto_rawDescGZIP(), []int{25}
}

func (x *BreedID) GetBreedID() int32 {
	if x != nil {
		return x.BreedID
	}
	return 0
}

var File_grpc_services_proto protoreflect.FileDescriptor

var file_grpc_services_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x83, 0x02, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x73, 0x12, 0x38,
	0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x4b, 0x69, 0x64, 0x73, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14,
	0x92, 0x41, 0x0e, 0x32, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x67,
	0x73, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f,
	0x67, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x53, 0x68, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x53, 0x68, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x53, 0x68, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x2c, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x10, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x47, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x26,
	0x0a, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e,
	0x92, 0x41, 0x08, 0x32, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x22, 0x95, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92,
	0x41, 0x0b, 0x32, 0x09, 0x55, 0x73, 0x65, 0x72, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x07, 0x32, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0xe0,
	0x41, 0x02, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x65, 0x66, 0x73, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x73, 0x3a, 0x5e,
	0x92, 0x41, 0x5b, 0x0a, 0x12, 0x2a, 0x03, 0x44, 0x6f, 0x67, 0x32, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x45, 0x7b, 0x20, 0x22, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x3a, 0x20, 0x22, 0x42, 0x72, 0x75, 0x6e, 0x6f, 0x22, 0x2c, 0x20, 0x22, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x63, 0x61, 0x73, 0x61, 0x22, 0x2c, 0x20,
	0x22, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x72, 0x75, 0x6e, 0x6f, 0x31,
	0x30, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x20, 0x7d, 0x22, 0x62,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x3a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x2b, 0x2a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x32,
	0x21, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x6d, 0x65,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x73, 0x32, 0x0e, 0x7b, 0x22, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x31,
	0x20, 0x7d, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x80, 0x01,
	0x92, 0x41, 0x7d, 0x0a, 0x24, 0x2a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x6f, 0x66, 0x20, 0x55, 0x73, 0x65, 0x72, 0x73, 0x32, 0x55, 0x7b, 0x20, 0x22, 0x75, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x3a, 0x20, 0x22, 0x42, 0x72, 0x75, 0x6e, 0x6f, 0x22, 0x2c, 0x20, 0x22, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x63, 0x61, 0x73, 0x61, 0x22, 0x2c, 0x20,
	0x22, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x72, 0x75, 0x6e, 0x6f, 0x31,
	0x30, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x7d, 0x5d, 0x20, 0x7d,
	0x22, 0xbc, 0x02, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x92, 0x41, 0x04, 0x32, 0x02, 0x49, 0x44, 0xe0, 0x41, 0x02,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0x92, 0x41, 0x06, 0x32, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x07, 0x32, 0x05, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x09, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x65, 0x66, 0x73, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x65, 0x66, 0x73,
	0x3a, 0x8c, 0x01, 0x92, 0x41, 0x88, 0x01, 0x0a, 0x3f, 0x2a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x20,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x32, 0x26, 0x55, 0x73, 0x65, 0x72, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x45, 0x7b, 0x20, 0x22, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x42, 0x72, 0x75, 0x6e, 0x6f, 0x22, 0x2c, 0x20, 0x22, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x63, 0x61, 0x73, 0x61, 0x22, 0x2c,
	0x20, 0x22, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x72, 0x75, 0x6e, 0x6f,
	0x31, 0x30, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x20, 0x7d, 0x22,
	0xe3, 0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0x92, 0x41, 0x0c, 0x32, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x20, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41,
	0x0f, 0x32, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x76, 0x92,
	0x41, 0x73, 0x0a, 0x3b, 0x2a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x20, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x25, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32,
	0x34, 0x7b, 0x20, 0x22, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x72, 0x75,
	0x6e, 0x6f, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x20, 0x22,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x63, 0x61, 0x73, 0x61,
	0x31, 0x32, 0x33, 0x22, 0x7d, 0x22, 0x65, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x3e, 0x92, 0x41,
	0x3b, 0x0a, 0x24, 0x2a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x12, 0x41, 0x20, 0x4a, 0x57, 0x54, 0x20, 0x42, 0x61, 0x72, 0x65, 0x61,
	0x72, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x13, 0x7b, 0x22, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x3a, 0x20, 0x22, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x22, 0x7d, 0x22, 0xb3, 0x02, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x08, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x10, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12,
	0x29, 0x0a, 0x07, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0f, 0x92, 0x41, 0x09, 0x32, 0x07, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x44, 0x6f,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x09,
	0x32, 0x07, 0x44, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x44, 0x6f,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x05, 0x32, 0x03, 0x53, 0x65, 0x78, 0xe0, 0x41, 0x02, 0x52,
	0x03, 0x53, 0x65, 0x78, 0x3a, 0x7c, 0x92, 0x41, 0x79, 0x0a, 0x32, 0x2a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x44, 0x6f, 0x67, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32,
	0x1c, 0x44, 0x6f, 0x67, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x43, 0x7b,
	0x20, 0x22, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20,
	0x22, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x32, 0x2c, 0x20, 0x22, 0x44,
	0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x53, 0x75, 0x7a, 0x79, 0x22, 0x2c,
	0x20, 0x22, 0x53, 0x65, 0x78, 0x22, 0x3a, 0x20, 0x22, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x22,
	0x20, 0x7d, 0x22, 0xf2, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x4b, 0x65, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x92, 0x41, 0x0a, 0x32, 0x08,
	0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x4b, 0x65, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x92, 0x41, 0x09, 0x32, 0x07, 0x42, 0x72, 0x65,
	0x65, 0x64, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44,
	0x12, 0x23, 0x0a, 0x05, 0x44, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0d, 0x92, 0x41, 0x07, 0x32, 0x05, 0x44, 0x6f, 0x67, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x05,
	0x44, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x44, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x09, 0x32, 0x07, 0x44, 0x6f, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x44, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x03, 0x53, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92,
	0x41, 0x05, 0x32, 0x03, 0x53, 0x65, 0x78, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x53, 0x65, 0x78, 0x3a,
	0x95, 0x01, 0x92, 0x41, 0x91, 0x01, 0x0a, 0x3e, 0x2a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x20, 0x44, 0x6f, 0x67, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x28, 0x44, 0x6f,
	0x67, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x73,
	0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x32, 0x4f, 0x7b, 0x20, 0x22, 0x4b, 0x65, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49,
	0x44, 0x22, 0x3a, 0x20, 0x32, 0x2c, 0x20, 0x22, 0x44, 0x6f, 0x67, 0x49, 0x44, 0x22, 0x3a, 0x20,
	0x31, 0x2c, 0x20, 0x22, 0x44, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x53,
	0x75, 0x7a, 0x79, 0x22, 0x2c, 0x20, 0x22, 0x53, 0x65, 0x78, 0x22, 0x3a, 0x20, 0x22, 0x46, 0x65,
	0x6d, 0x61, 0x6c, 0x65, 0x22, 0x20, 0x7d, 0x22, 0xb3, 0x02, 0x0a, 0x03, 0x44, 0x6f, 0x67, 0x12,
	0x2c, 0x0a, 0x08, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x10, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x23, 0x0a,
	0x05, 0x44, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0x92, 0x41,
	0x07, 0x32, 0x05, 0x44, 0x6f, 0x67, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x44, 0x6f, 0x67,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x07, 0x44, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x09, 0x32, 0x07, 0x44, 0x6f, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x44, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x03, 0x53, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x05, 0x32,
	0x03, 0x53, 0x65, 0x78, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x53, 0x65, 0x78, 0x12, 0x39, 0x0a, 0x05,
	0x42, 0x72, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x67, 0x42, 0x72, 0x65, 0x65,
	0x64, 0x42, 0x0d, 0x92, 0x41, 0x07, 0x32, 0x05, 0x42, 0x72, 0x65, 0x65, 0x64, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x42, 0x72, 0x65, 0x65, 0x64, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x0c, 0x2a, 0x0a,
	0x44, 0x6f, 0x67, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x41, 0x7b, 0x20, 0x22, 0x4b,
	0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22, 0x44, 0x6f,
	0x67, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22, 0x44, 0x6f, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x53, 0x75, 0x7a, 0x79, 0x22, 0x2c, 0x20, 0x22, 0x53, 0x65, 0x78,
	0x22, 0x3a, 0x20, 0x22, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x22, 0x20, 0x7d, 0x22, 0xad, 0x05,
	0x0a, 0x08, 0x44, 0x6f, 0x67, 0x42, 0x72, 0x65, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x42, 0x72,
	0x65, 0x65, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x17, 0x92, 0x41, 0x11,
	0x32, 0x0f, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x72, 0x65, 0x65,
	0x64, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x12, 0x42, 0x0a,
	0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x1e, 0x92, 0x41, 0x18, 0x32, 0x16, 0x44, 0x6f, 0x67, 0x20, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x4b, 0x69, 0x64, 0x73,
	0xe0, 0x41, 0x02, 0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x64,
	0x73, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x44, 0x6f,
	0x67, 0x20, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x44, 0x6f, 0x67, 0x73, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x47,
	0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x67, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x53,
	0x68, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92,
	0x41, 0x1e, 0x32, 0x1c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x68, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x67,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x53, 0x68, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a,
	0x08, 0x47, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x24, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x67,
	0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64,
	0x6f, 0x67, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x3a, 0x0a, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x22, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x67,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x3b, 0x0a, 0x09, 0x42,
	0x72, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d,
	0x92, 0x41, 0x17, 0x32, 0x15, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x64, 0x6f, 0x67, 0x20, 0x62, 0x72, 0x65, 0x65, 0x64, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x42,
	0x72, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x42, 0x72, 0x65, 0x65,
	0x64, 0x49, 0x6d, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x12, 0x32,
	0x10, 0x55, 0x52, 0x4c, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x72, 0x65, 0x65, 0x64, 0x20, 0x69, 0x6d,
	0x67, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x6d, 0x67, 0x3a, 0xac,
	0x01, 0x92, 0x41, 0xa8, 0x01, 0x0a, 0x12, 0x2a, 0x10, 0x44, 0x6f, 0x67, 0x20, 0x42, 0x72, 0x65,
	0x65, 0x64, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x91, 0x01, 0x7b, 0x20, 0x22, 0x42,
	0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22, 0x47, 0x6f, 0x6f,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22,
	0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x67, 0x73, 0x22, 0x3a, 0x20, 0x32,
	0x2c, 0x20, 0x22, 0x53, 0x68, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x20, 0x32, 0x2c,
	0x20, 0x22, 0x47, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x20, 0x33, 0x2c, 0x20,
	0x22, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x22, 0x3a, 0x20, 0x34, 0x2c, 0x20, 0x22, 0x42, 0x72,
	0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x48, 0x75, 0x73, 0x63, 0x6b,
	0x79, 0x22, 0x2c, 0x20, 0x22, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x6d, 0x67, 0x22, 0x3a, 0x20,
	0x22, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x7d, 0x22, 0xc0, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x67, 0x52, 0x07, 0x64, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x3a, 0x7e, 0x92, 0x41, 0x7b, 0x0a, 0x25, 0x2a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x64, 0x6f, 0x67, 0x73, 0x32, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x64, 0x6f, 0x67, 0x73, 0x32, 0x52, 0x7b, 0x20,
	0x22, 0x64, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x4b, 0x65,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22, 0x44, 0x6f, 0x67,
	0x49, 0x44, 0x22, 0x3a, 0x20, 0x31, 0x32, 0x2c, 0x20, 0x22, 0x44, 0x6f, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x4a, 0x61, 0x63, 0x6f, 0x62, 0x22, 0x2c, 0x20, 0x22, 0x53, 0x65,
	0x78, 0x22, 0x3a, 0x20, 0x22, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x22, 0x7d, 0x5d, 0x20, 0x7d,
	0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x43, 0x0a, 0x05, 0x44, 0x6f, 0x67, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x6f, 0x67,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x44, 0x6f, 0x67, 0x49, 0x44, 0x3a,
	0x24, 0x92, 0x41, 0x21, 0x0a, 0x0f, 0x2a, 0x0d, 0x44, 0x6f, 0x67, 0x20, 0x49, 0x44, 0x20, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x0e, 0x7b, 0x20, 0x22, 0x44, 0x6f, 0x67, 0x49, 0x44, 0x22,
	0x3a, 0x20, 0x35, 0x30, 0x7d, 0x22, 0xbf, 0x02, 0x0a, 0x06, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x31, 0x0a, 0x08, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x15, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x54, 0x68, 0x65, 0x20, 0x4b, 0x65, 0x6e,
	0x6e, 0x65, 0x6c, 0x20, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x4b, 0x65, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1b, 0x32,
	0x19, 0x54, 0x68, 0x65, 0x20, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x11, 0x32,
	0x0f, 0x54, 0x68, 0x65, 0x20, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x4e, 0x61, 0x6d, 0x65,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x5d, 0x92, 0x41, 0x5a, 0x0a, 0x0f, 0x2a,
	0x0d, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x47,
	0x7b, 0x20, 0x22, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x31, 0x2c,
	0x20, 0x22, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x3a, 0x20, 0x22, 0x28, 0x38, 0x31, 0x29, 0x20, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32,
	0x31, 0x22, 0x2c, 0x20, 0x22, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x4b, 0x65, 0x6e,
	0x6e, 0x65, 0x6c, 0x20, 0x31, 0x22, 0x7d, 0x22, 0x65, 0x0a, 0x08, 0x4b, 0x65, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x08, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x15, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x54, 0x68, 0x65, 0x20,
	0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x4b, 0x65,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x3a, 0x26, 0x92, 0x41, 0x23, 0x0a, 0x0f, 0x2a, 0x0d, 0x54,
	0x68, 0x65, 0x20, 0x6b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x49, 0x44, 0x32, 0x10, 0x7b, 0x20,
	0x22, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x31, 0x7d, 0x22, 0x85,
	0x03, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1b, 0x32,
	0x19, 0x54, 0x68, 0x65, 0x20, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x6f, 0x12, 0x2b, 0x0a, 0x03, 0x52, 0x75, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x13, 0x32, 0x11, 0x54, 0x68, 0x65, 0x20, 0x4b, 0x65, 0x6e,
	0x6e, 0x65, 0x6c, 0x20, 0x53, 0x74, 0x72, 0x65, 0x65, 0x74, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x52,
	0x75, 0x61, 0x12, 0x36, 0x0a, 0x06, 0x42, 0x61, 0x69, 0x72, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x18, 0x32, 0x16, 0x54, 0x68, 0x65, 0x20, 0x4b, 0x65, 0x6e,
	0x6e, 0x65, 0x6c, 0x20, 0x4e, 0x65, 0x69, 0x67, 0x62, 0x6f, 0x72, 0x68, 0x6f, 0x6f, 0x64, 0xe0,
	0x41, 0x02, 0x52, 0x06, 0x42, 0x61, 0x69, 0x72, 0x72, 0x6f, 0x12, 0x30, 0x0a, 0x03, 0x43, 0x45,
	0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x18, 0x32, 0x16, 0x54, 0x68,
	0x65, 0x20, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x20,
	0x43, 0x6f, 0x64, 0x65, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x43, 0x45, 0x50, 0x12, 0x2f, 0x0a, 0x06,
	0x43, 0x69, 0x64, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41,
	0x11, 0x32, 0x0f, 0x54, 0x68, 0x65, 0x20, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x43, 0x69,
	0x74, 0x79, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x43, 0x69, 0x64, 0x61, 0x64, 0x65, 0x3a, 0x77, 0x92,
	0x41, 0x74, 0x0a, 0x10, 0x2a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x32, 0x60, 0x7b, 0x20, 0x22, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x6f, 0x22,
	0x3a, 0x20, 0x22, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x52, 0x75, 0x61, 0x22, 0x3a, 0x20, 0x22, 0x52,
	0x75, 0x61, 0x20, 0x41, 0x6d, 0x65, 0x6c, 0x69, 0x61, 0x22, 0x2c, 0x20, 0x22, 0x42, 0x61, 0x69,
	0x72, 0x72, 0x6f, 0x22, 0x3a, 0x20, 0x22, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x22, 0x2c, 0x20, 0x22,
	0x43, 0x45, 0x50, 0x22, 0x3a, 0x20, 0x22, 0x35, 0x32, 0x30, 0x35, 0x30, 0x2d, 0x31, 0x30, 0x30,
	0x22, 0x2c, 0x20, 0x22, 0x43, 0x69, 0x64, 0x61, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x52, 0x65,
	0x63, 0x69, 0x66, 0x65, 0x22, 0x7d, 0x22, 0xec, 0x01, 0x0a, 0x0f, 0x44, 0x6f, 0x67, 0x73, 0x49,
	0x6e, 0x54, 0x68, 0x65, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x6f,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x6f, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x67, 0x53, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x67, 0x53, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09,
	0x42, 0x72, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x42, 0x72, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x72,
	0x65, 0x65, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x72, 0x65,
	0x65, 0x64, 0x49, 0x44, 0x3a, 0x6f, 0x92, 0x41, 0x6c, 0x0a, 0x1a, 0x2a, 0x18, 0x44, 0x6f, 0x67,
	0x20, 0x69, 0x6e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x4e, 0x7b, 0x20, 0x22, 0x44, 0x6f, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x44, 0x61, 0x69, 0x73, 0x79, 0x22, 0x2c, 0x20, 0x22, 0x44, 0x6f,
	0x67, 0x53, 0x65, 0x78, 0x22, 0x3a, 0x20, 0x22, 0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x22, 0x2c,
	0x20, 0x22, 0x42, 0x72, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x48,
	0x75, 0x73, 0x63, 0x6b, 0x79, 0x22, 0x2c, 0x20, 0x22, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44,
	0x22, 0x3a, 0x20, 0x31, 0x7d, 0x22, 0xb2, 0x02, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x06, 0x6b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x65, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x06, 0x6b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x64,
	0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x67, 0x73, 0x49, 0x6e, 0x54, 0x68, 0x65,
	0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x6f, 0x67, 0x73, 0x3a, 0xbb, 0x01, 0x92,
	0x41, 0xb7, 0x01, 0x0a, 0x1b, 0x2a, 0x19, 0x47, 0x65, 0x74, 0x20, 0x4b, 0x65, 0x6e, 0x6e, 0x65,
	0x6c, 0x20, 0x42, 0x79, 0x20, 0x49, 0x64, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x97, 0x01, 0x7b, 0x20, 0x22, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x3a,
	0x20, 0x31, 0x2c, 0x20, 0x22, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x28, 0x38, 0x31, 0x29, 0x20, 0x39, 0x38, 0x37, 0x36, 0x35,
	0x34, 0x33, 0x32, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x6f, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22, 0x44, 0x6f, 0x67, 0x49, 0x44, 0x22, 0x3a, 0x20,
	0x31, 0x32, 0x2c, 0x20, 0x22, 0x44, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0x4a, 0x61, 0x63, 0x6f, 0x62, 0x22, 0x2c, 0x20, 0x22, 0x53, 0x65, 0x78, 0x22, 0x3a, 0x20, 0x22,
	0x46, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x22, 0x7d, 0x5d, 0x7d, 0x22, 0xcc, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0a, 0x6b,
	0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x7e, 0x92, 0x41, 0x7b, 0x0a, 0x1d,
	0x2a, 0x1b, 0x47, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x5a, 0x7b,
	0x20, 0x22, 0x6b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3a, 0x20, 0x5b,
	0x7b, 0x22, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20,
	0x22, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3a,
	0x20, 0x22, 0x28, 0x38, 0x31, 0x29, 0x20, 0x39, 0x38, 0x37, 0x36, 0x35, 0x34, 0x33, 0x32, 0x31,
	0x22, 0x2c, 0x20, 0x22, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x4b, 0x65, 0x6e, 0x6e,
	0x65, 0x6c, 0x20, 0x31, 0x22, 0x7d, 0x5d, 0x20, 0x7d, 0x22, 0x90, 0x02, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x54,
	0x68, 0x65, 0x20, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x92, 0x41, 0x11, 0x32, 0x0f, 0x54,
	0x68, 0x65, 0x20, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x54, 0x92, 0x41, 0x51, 0x0a, 0x16, 0x2a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x32, 0x37, 0x7b, 0x22, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x28, 0x38, 0x31, 0x29, 0x20, 0x39, 0x38, 0x37,
	0x36, 0x35, 0x34, 0x33, 0x32, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a,
	0x20, 0x22, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x31, 0x22, 0x7d, 0x22, 0xf9, 0x04, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4b,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e, 0x92, 0x41, 0x18, 0x32, 0x16,
	0x44, 0x6f, 0x67, 0x20, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x4b, 0x69, 0x64, 0x73, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x4b, 0x69, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92,
	0x41, 0x1e, 0x32, 0x1c, 0x44, 0x6f, 0x67, 0x20, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x44, 0x6f, 0x67, 0x73,
	0xe0, 0x41, 0x02, 0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x67,
	0x73, 0x12, 0x40, 0x0a, 0x08, 0x53, 0x68, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20,
	0x6f, 0x66, 0x20, 0x73, 0x68, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x64, 0x6f, 0x67, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x53, 0x68, 0x65, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x20, 0x6f, 0x66, 0x20, 0x67, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x67, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x47, 0x72, 0x6f,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x64, 0x6f, 0x67, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x12, 0x3b, 0x0a, 0x09, 0x42, 0x72, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x17, 0x32, 0x15, 0x4e, 0x61, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x67, 0x20, 0x62, 0x72, 0x65, 0x65, 0x64,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x42, 0x72, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x08, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0x92, 0x41, 0x12, 0x32, 0x10, 0x55, 0x52, 0x4c, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x72,
	0x65, 0x65, 0x64, 0x20, 0x69, 0x6d, 0x67, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x42, 0x72, 0x65, 0x65,
	0x64, 0x49, 0x6d, 0x67, 0x3a, 0xa1, 0x01, 0x92, 0x41, 0x9d, 0x01, 0x0a, 0x15, 0x2a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x42, 0x72, 0x65, 0x65, 0x64, 0x20, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x32, 0x83, 0x01, 0x7b, 0x20, 0x22, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x4b, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22, 0x47, 0x6f, 0x6f, 0x64, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x6f, 0x67, 0x73, 0x22, 0x3a, 0x20, 0x32, 0x2c, 0x20, 0x22, 0x53, 0x68,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x20, 0x33, 0x2c, 0x20, 0x22, 0x47, 0x72, 0x6f,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x20, 0x34, 0x2c, 0x20, 0x22, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x22, 0x3a, 0x20, 0x35, 0x2c, 0x20, 0x22, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0x48, 0x75, 0x73, 0x63, 0x6b, 0x79, 0x22, 0x2c, 0x20, 0x22, 0x42, 0x72, 0x65, 0x65, 0x64,
	0x49, 0x6d, 0x67, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x72, 0x65, 0x65, 0x64, 0x69, 0x6d, 0x67, 0x75,
	0x72, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x7d, 0x22, 0xa3, 0x05, 0x0a, 0x05, 0x42, 0x72, 0x65,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x14, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x54, 0x68, 0x65, 0x20, 0x42, 0x72,
	0x65, 0x65, 0x64, 0x20, 0x49, 0x44, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x42, 0x72, 0x65, 0x65, 0x64,
	0x49, 0x44, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e, 0x92, 0x41, 0x18, 0x32, 0x16, 0x44,
	0x6f, 0x67, 0x20, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x20, 0x4b, 0x69, 0x64, 0x73, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x4b, 0x69, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0x41,
	0x1e, 0x32, 0x1c, 0x44, 0x6f, 0x67, 0x20, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x44, 0x6f, 0x67, 0x73, 0xe0,
	0x41, 0x02, 0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x67, 0x73,
	0x12, 0x40, 0x0a, 0x08, 0x53, 0x68, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x24, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x6f,
	0x66, 0x20, 0x73, 0x68, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x64, 0x6f, 0x67, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x53, 0x68, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x40, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x20, 0x6f, 0x66, 0x20, 0x67, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x67, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x22, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x20, 0x6f, 0x66, 0x20, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x64, 0x6f, 0x67, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x12, 0x3b, 0x0a, 0x09, 0x42, 0x72, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0x92, 0x41, 0x17, 0x32, 0x15, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x67, 0x20, 0x62, 0x72, 0x65, 0x65, 0x64, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x42, 0x72, 0x65, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x08, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x12, 0x32, 0x10, 0x55, 0x52, 0x4c, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x72, 0x65,
	0x65, 0x64, 0x20, 0x69, 0x6d, 0x67, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x42, 0x72, 0x65, 0x65, 0x64,
	0x49, 0x6d, 0x67, 0x3a, 0xa8, 0x01, 0x92, 0x41, 0xa4, 0x01, 0x0a, 0x0e, 0x2a, 0x0c, 0x42, 0x72,
	0x65, 0x65, 0x64, 0x20, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x32, 0x91, 0x01, 0x7b, 0x20, 0x22,
	0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22, 0x47, 0x6f,
	0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20,
	0x22, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x67, 0x73, 0x22, 0x3a, 0x20,
	0x32, 0x2c, 0x20, 0x22, 0x53, 0x68, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x20, 0x33,
	0x2c, 0x20, 0x22, 0x47, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x20, 0x34, 0x2c,
	0x20, 0x22, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x22, 0x3a, 0x20, 0x35, 0x2c, 0x20, 0x22, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x48, 0x75, 0x73, 0x63, 0x6b, 0x79, 0x22, 0x2c, 0x20,
	0x22, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x6d, 0x67, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x72, 0x65,
	0x65, 0x64, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x7d, 0x22, 0x8f,
	0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x72, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x62, 0x72, 0x65, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x65, 0x65, 0x64, 0x52, 0x09, 0x62,
	0x72, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0xc5, 0x01, 0x92, 0x41, 0xc1, 0x01, 0x0a,
	0x18, 0x2a, 0x16, 0x47, 0x65, 0x74, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x42, 0x72, 0x65, 0x65, 0x64,
	0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa4, 0x01, 0x7b, 0x20, 0x22, 0x62,
	0x72, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x20, 0x22, 0x42,
	0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22, 0x47, 0x6f, 0x6f,
	0x64, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x64, 0x73, 0x22, 0x3a, 0x20, 0x31, 0x2c, 0x20, 0x22,
	0x47, 0x6f, 0x6f, 0x64, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x67, 0x73, 0x22, 0x3a, 0x20, 0x32,
	0x2c, 0x20, 0x22, 0x53, 0x68, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x20, 0x33, 0x2c,
	0x20, 0x22, 0x47, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0x3a, 0x20, 0x34, 0x2c, 0x20,
	0x22, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x22, 0x3a, 0x20, 0x35, 0x2c, 0x20, 0x22, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x48, 0x75, 0x73, 0x63, 0x6b, 0x79, 0x22, 0x2c, 0x20, 0x22,
	0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x6d, 0x67, 0x22, 0x3a, 0x20, 0x22, 0x62, 0x72, 0x65, 0x65,
	0x64, 0x69, 0x6d, 0x67, 0x75, 0x72, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x7d, 0x5d, 0x20, 0x7d,
	0x22, 0x5b, 0x0a, 0x07, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x07, 0x42,
	0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0x54, 0x68, 0x65, 0x20, 0x42, 0x72, 0x65, 0x65, 0x64, 0x20, 0x49, 0x44, 0xe0,
	0x41, 0x02, 0x52, 0x07, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x3a, 0x20, 0x92, 0x41, 0x1d,
	0x0a, 0x0a, 0x2a, 0x08, 0x42, 0x72, 0x65, 0x65, 0x64, 0x20, 0x49, 0x44, 0x32, 0x0f, 0x7b, 0x20,
	0x22, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x22, 0x3a, 0x20, 0x31, 0x7d, 0x32, 0xe3, 0x03,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a,
	0x06, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x18, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11,
	0x12, 0x0f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x7d, 0x12, 0x61, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x12, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a, 0x16, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x7b, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0x12, 0x6d, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x1a, 0x12, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x49, 0x44, 0x7d,
	0x3a, 0x01, 0x2a, 0x32, 0x60, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x18, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x22, 0x06, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x32, 0xad, 0x03, 0x0a, 0x0a, 0x44, 0x6f, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f,
	0x67, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x67,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x64, 0x6f, 0x67, 0x73, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x55, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x67, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x0d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07, 0x12, 0x05, 0x2f, 0x64, 0x6f, 0x67, 0x73,
	0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x11,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x67, 0x49,
	0x44, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x6f, 0x67, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x64, 0x6f, 0x67,
	0x73, 0x2f, 0x7b, 0x44, 0x6f, 0x67, 0x49, 0x44, 0x7d, 0x12, 0x4d, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x6f, 0x67, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x67, 0x49, 0x44, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x67, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x2a, 0x14, 0x2f, 0x64, 0x6f, 0x67, 0x73, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2f, 0x7b, 0x44, 0x6f, 0x67, 0x49, 0x44, 0x7d, 0x12, 0x5b, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x6f, 0x67, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x6f, 0x67, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x1a, 0x14, 0x2f, 0x64,
	0x6f, 0x67, 0x73, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x44, 0x6f, 0x67, 0x49,
	0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x32, 0xf0, 0x03, 0x0a, 0x0d, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f,
	0x6b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x64, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x65,
	0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x1a, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x6b, 0x65, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x7b, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x12, 0x5e, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x65, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x6b, 0x65, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5b, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x65, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a,
	0x19, 0x2f, 0x6b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f,
	0x7b, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x7d, 0x12, 0x5c, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x65, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x1a, 0x19, 0x2f, 0x6b, 0x65, 0x6e,
	0x6e, 0x65, 0x6c, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x4b, 0x65, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x32, 0xc7, 0x03, 0x0a, 0x0c, 0x42, 0x72, 0x65,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x65, 0x65, 0x64, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x58, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42,
	0x72, 0x65, 0x65, 0x64, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x42, 0x72, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x0e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x12,
	0x50, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x72, 0x65, 0x65, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x13, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x65,
	0x65, 0x64, 0x49, 0x44, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x72, 0x65, 0x65, 0x64, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12,
	0x10, 0x2f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x2f, 0x7b, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44,
	0x7d, 0x12, 0x56, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x65, 0x65, 0x64,
	0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x72,
	0x65, 0x65, 0x64, 0x49, 0x44, 0x1a, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x42, 0x72, 0x65, 0x65, 0x64, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x2a, 0x17, 0x2f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f,
	0x7b, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x7d, 0x12, 0x57, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x72, 0x65, 0x65, 0x64, 0x12, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x65, 0x65, 0x64, 0x1a, 0x11, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x65, 0x65, 0x64, 0x22, 0x22,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x1a, 0x17, 0x2f, 0x62, 0x72, 0x65, 0x65, 0x64, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x42, 0x72, 0x65, 0x65, 0x64, 0x49, 0x44, 0x7d, 0x3a,
	0x01, 0x2a, 0x32, 0x60, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x6f, 0x67, 0x12, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x0f, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x67, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x7b, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x7d, 0x42, 0x23, 0x5a, 0x21, 0x72, 0x65, 0x73, 0x74, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_grpc_services_proto_rawDescOnce sync.Once
	file_grpc_services_proto_rawDescData = file_grpc_services_proto_rawDesc
)

func file_grpc_services_proto_rawDescGZIP() []byte {
	file_grpc_services_proto_rawDescOnce.Do(func() {
		file_grpc_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_services_proto_rawDescData)
	})
	return file_grpc_services_proto_rawDescData
}

var file_grpc_services_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_grpc_services_proto_goTypes = []interface{}{
	(*UserPrefs)(nil),             // 0: apiservice.UserPrefs
	(*User)(nil),                  // 1: apiservice.User
	(*UserID)(nil),                // 2: apiservice.UserID
	(*GetEmptyRequest)(nil),       // 3: apiservice.GetEmptyRequest
	(*GetAllUsersResponse)(nil),   // 4: apiservice.GetAllUsersResponse
	(*UserWithoutPassword)(nil),   // 5: apiservice.UserWithoutPassword
	(*LoginRequest)(nil),          // 6: apiservice.LoginRequest
	(*LoginResponse)(nil),         // 7: apiservice.LoginResponse
	(*CreateDogRequest)(nil),      // 8: apiservice.CreateDogRequest
	(*UpdateDogRequest)(nil),      // 9: apiservice.UpdateDogRequest
	(*Dog)(nil),                   // 10: apiservice.Dog
	(*DogBreed)(nil),              // 11: apiservice.DogBreed
	(*GetAllDogsResponse)(nil),    // 12: apiservice.GetAllDogsResponse
	(*EmptyRequest)(nil),          // 13: apiservice.EmptyRequest
	(*DogID)(nil),                 // 14: apiservice.DogID
	(*Kennel)(nil),                // 15: apiservice.Kennel
	(*KennelID)(nil),              // 16: apiservice.KennelID
	(*Address)(nil),               // 17: apiservice.Address
	(*DogsInTheKennel)(nil),       // 18: apiservice.DogsInTheKennel
	(*GetKennelByIdResponse)(nil), // 19: apiservice.GetKennelByIdResponse
	(*GetAllKennelsResponse)(nil), // 20: apiservice.GetAllKennelsResponse
	(*CreateKennelRequest)(nil),   // 21: apiservice.CreateKennelRequest
	(*CreateBreedRequest)(nil),    // 22: apiservice.CreateBreedRequest
	(*Breed)(nil),                 // 23: apiservice.Breed
	(*GetAllBreedResponse)(nil),   // 24: apiservice.GetAllBreedResponse
	(*BreedID)(nil),               // 25: apiservice.BreedID
}
var file_grpc_services_proto_depIdxs = []int32{
	0,  // 0: apiservice.User.UserPrefs:type_name -> apiservice.UserPrefs
	5,  // 1: apiservice.GetAllUsersResponse.users_list:type_name -> apiservice.UserWithoutPassword
	0,  // 2: apiservice.UserWithoutPassword.UserPrefs:type_name -> apiservice.UserPrefs
	11, // 3: apiservice.Dog.Breed:type_name -> apiservice.DogBreed
	10, // 4: apiservice.GetAllDogsResponse.dog_list:type_name -> apiservice.Dog
	17, // 5: apiservice.Kennel.address:type_name -> apiservice.Address
	15, // 6: apiservice.GetKennelByIdResponse.kennel:type_name -> apiservice.Kennel
	18, // 7: apiservice.GetKennelByIdResponse.dogs:type_name -> apiservice.DogsInTheKennel
	15, // 8: apiservice.GetAllKennelsResponse.kennel_list:type_name -> apiservice.Kennel
	17, // 9: apiservice.CreateKennelRequest.address:type_name -> apiservice.Address
	23, // 10: apiservice.GetAllBreedResponse.breed_list:type_name -> apiservice.Breed
	1,  // 11: apiservice.UserService.SignUp:input_type -> apiservice.User
	3,  // 12: apiservice.UserService.GetAllUsers:input_type -> apiservice.GetEmptyRequest
	2,  // 13: apiservice.UserService.GetUserById:input_type -> apiservice.UserID
	2,  // 14: apiservice.UserService.DeleteUser:input_type -> apiservice.UserID
	5,  // 15: apiservice.UserService.UpdateUser:input_type -> apiservice.UserWithoutPassword
	6,  // 16: apiservice.LoginService.SignIn:input_type -> apiservice.LoginRequest
	8,  // 17: apiservice.DogService.CreateDog:input_type -> apiservice.CreateDogRequest
	13, // 18: apiservice.DogService.GetAllDogs:input_type -> apiservice.EmptyRequest
	14, // 19: apiservice.DogService.GetDogById:input_type -> apiservice.DogID
	14, // 20: apiservice.DogService.DeleteDog:input_type -> apiservice.DogID
	9,  // 21: apiservice.DogService.UpdateDog:input_type -> apiservice.UpdateDogRequest
	13, // 22: apiservice.KennelService.GetAllKennels:input_type -> apiservice.EmptyRequest
	16, // 23: apiservice.KennelService.GetKennelById:input_type -> apiservice.KennelID
	21, // 24: apiservice.KennelService.CreateKennel:input_type -> apiservice.CreateKennelRequest
	16, // 25: apiservice.KennelService.DeleteKennel:input_type -> apiservice.KennelID
	15, // 26: apiservice.KennelService.UpdateKennel:input_type -> apiservice.Kennel
	22, // 27: apiservice.BreedService.CreateBreed:input_type -> apiservice.CreateBreedRequest
	13, // 28: apiservice.BreedService.GetAllBreed:input_type -> apiservice.EmptyRequest
	25, // 29: apiservice.BreedService.GetBreedById:input_type -> apiservice.BreedID
	25, // 30: apiservice.BreedService.DeleteBreed:input_type -> apiservice.BreedID
	23, // 31: apiservice.BreedService.UpdateBreed:input_type -> apiservice.Breed
	2,  // 32: apiservice.MatchService.MatchUserWithDog:input_type -> apiservice.UserID
	2,  // 33: apiservice.UserService.SignUp:output_type -> apiservice.UserID
	4,  // 34: apiservice.UserService.GetAllUsers:output_type -> apiservice.GetAllUsersResponse
	5,  // 35: apiservice.UserService.GetUserById:output_type -> apiservice.UserWithoutPassword
	5,  // 36: apiservice.UserService.DeleteUser:output_type -> apiservice.UserWithoutPassword
	5,  // 37: apiservice.UserService.UpdateUser:output_type -> apiservice.UserWithoutPassword
	7,  // 38: apiservice.LoginService.SignIn:output_type -> apiservice.LoginResponse
	10, // 39: apiservice.DogService.CreateDog:output_type -> apiservice.Dog
	12, // 40: apiservice.DogService.GetAllDogs:output_type -> apiservice.GetAllDogsResponse
	10, // 41: apiservice.DogService.GetDogById:output_type -> apiservice.Dog
	10, // 42: apiservice.DogService.DeleteDog:output_type -> apiservice.Dog
	10, // 43: apiservice.DogService.UpdateDog:output_type -> apiservice.Dog
	20, // 44: apiservice.KennelService.GetAllKennels:output_type -> apiservice.GetAllKennelsResponse
	19, // 45: apiservice.KennelService.GetKennelById:output_type -> apiservice.GetKennelByIdResponse
	15, // 46: apiservice.KennelService.CreateKennel:output_type -> apiservice.Kennel
	15, // 47: apiservice.KennelService.DeleteKennel:output_type -> apiservice.Kennel
	15, // 48: apiservice.KennelService.UpdateKennel:output_type -> apiservice.Kennel
	23, // 49: apiservice.BreedService.CreateBreed:output_type -> apiservice.Breed
	24, // 50: apiservice.BreedService.GetAllBreed:output_type -> apiservice.GetAllBreedResponse
	23, // 51: apiservice.BreedService.GetBreedById:output_type -> apiservice.Breed
	23, // 52: apiservice.BreedService.DeleteBreed:output_type -> apiservice.Breed
	23, // 53: apiservice.BreedService.UpdateBreed:output_type -> apiservice.Breed
	10, // 54: apiservice.MatchService.MatchUserWithDog:output_type -> apiservice.Dog
	33, // [33:55] is the sub-list for method output_type
	11, // [11:33] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_grpc_services_proto_init() }
func file_grpc_services_proto_init() {
	if File_grpc_services_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPrefs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserWithoutPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DogBreed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllDogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DogID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kennel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KennelID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DogsInTheKennel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKennelByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllKennelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKennelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBreedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Breed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllBreedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_services_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreedID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_grpc_services_proto_goTypes,
		DependencyIndexes: file_grpc_services_proto_depIdxs,
		MessageInfos:      file_grpc_services_proto_msgTypes,
	}.Build()
	File_grpc_services_proto = out.File
	file_grpc_services_proto_rawDesc = nil
	file_grpc_services_proto_goTypes = nil
	file_grpc_services_proto_depIdxs = nil
}
